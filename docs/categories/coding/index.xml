<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on 爪子</title>
    <link>hugoblog/categories/coding/</link>
    <description>Recent content in Coding on 爪子</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Jul 2017 18:20:59 +0800</lastBuildDate>
    
	<atom:link href="hugoblog/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>通过 pre-hook 判断是否推送重复的内容</title>
      <link>hugoblog/posts/pre-receive%E4%B8%AD%E5%88%A4%E6%96%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 14 Jul 2017 18:20:59 +0800</pubDate>
      
      <guid>hugoblog/posts/pre-receive%E4%B8%AD%E5%88%A4%E6%96%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
      <description>前言 昨天运维同事找我，要求实现一个 pre-receive 钩子，在里面判断推送的文件中是否有重复的文件，如果有就拒绝此次 push。问我该如何实现。
虽然觉得这个判断标准有点莫名其妙，但还是想办法实现了一下。途中遇到过很多问题，以为无法实现，不过最终还是找到了解决方法。
简单介绍 pre-receive  参考连接： Git - githooks Documentation
 pre-receive 是 Git 众多 Hooks 中的一种，在远程库中触发。当 server 端(比如：gitlab)收到用户的 push 内容后，在更改远程库内容前，如果 pre-receive 文件存在，就会执行这个文件。文件正常退出（exit 0）表示接受该次 push, 反之则拒绝。
server 端执行 pre-receive 时，没有参数，但会从标准输入写入一行数据：
&amp;lt;old-value&amp;gt; SP &amp;lt;new-value&amp;gt; SP &amp;lt;ref-name&amp;gt; LF  Git object  参考连接：
 Git Book - The Git Object Model Git Magic - Chapter 8. Secrets Revealed   在使用 git push 命令时，终端可以看到类似下面的输出
Writing objects: 100% (3/3), 253 bytes | 0 bytes/s, done.</description>
    </item>
    
    <item>
      <title>Replace Type Code With State/Strategy</title>
      <link>hugoblog/posts/replace_type_code_with_state_strategy/</link>
      <pubDate>Mon, 26 Dec 2016 20:55:47 +0800</pubDate>
      
      <guid>hugoblog/posts/replace_type_code_with_state_strategy/</guid>
      <description>今天在阅读《重构：改善既有代码的设计》第一个案例中，遇到了一个replace type code with state/strategy的概念，不是很了解， 但大概懂了意思。决定用python实现一下其代码。
觉得主要思想是：
一个对象(Movie)有一个属性(price_code)，这个属性的不同会导致对象的方法(get_charge)返回不同的结果。
最开始的想法肯定是用subclass进行分类，但是一部电影可以更换price_code，一个对象没法更换其所属类，所以直接建立一个price对象作为属性，改变price_code时，即改变了price对象。
重构前的代码：
class Movie(object): REGULAR = 0 NEW_RELEASE = 1 CHILDRENS = 2 def __init__(self, title, price_code): self.title = title self.price_code = price_code def get_charge(self, days_rented): result = 0 if self.price_code == self.REGULAR: result += 2 if days_rented &amp;gt; 2: result += (days_rented - 2) * 1.5 elif self.price_code == self.NEW_RELEASE: result += days_rented * 3 elif self.price_code == self.CHILDRENS: result += 1.</description>
    </item>
    
  </channel>
</rss>