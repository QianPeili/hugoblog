<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on 爪子</title>
    <link>https://qianpeili.github.io/hugoblog/tags/nginx/</link>
    <description>Recent content in Nginx on 爪子</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 18 Jul 2018 15:20:36 +0800</lastBuildDate>
    
	<atom:link href="https://qianpeili.github.io/hugoblog/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx Upload Module的编译和使用</title>
      <link>https://qianpeili.github.io/hugoblog/posts/nginx-upload-module-in-action/</link>
      <pubDate>Wed, 18 Jul 2018 15:20:36 +0800</pubDate>
      
      <guid>https://qianpeili.github.io/hugoblog/posts/nginx-upload-module-in-action/</guid>
      <description>服务端需要增加一个文件上传功能，最直接可能就是后端程序里加个接收文件并保存的功能。但是之前看到 nginx 有个上传模块，而且如果直接 nginx 层把文件保存下来，就不需要再把文件转发到后端层处理了。
那么就开始吧。
一、下载 Nginx Upload Module 源码 模块的 github 地址： fdintino/nginx-upload-module: A module for nginx web server for handling file uploads using multipart/form-data encoding (RFC 1867).
git clone https://github.com/fdintino/nginx-upload-module.git  二、重新编译并重启 Nginx 为了将新模块添加到 nginx 程序中，需要重新编译 nginx。
nginx -V 可以输出原先的 nginx 所用的编译参数，原样复制后，添加新参数 --add-module=/path/to/nginx-upload-module。如：
./configure &amp;lt;old configure options&amp;gt; --add-module=../nginx-upload-module  make &amp;amp; make install 之后，新的 nginx 二进制文件会替换原有的二进制文件，而原有的二进制文件会被重命名为 nginx.old。（这一步也可以在 make 之后手动操作）。这个时候调用 nginx -V 命令我们可以看到编译参数已经包含了新的内容。
然后通过向 master 进程发送 SIGUSR2 信号来重启 nginx 服务。</description>
    </item>
    
    <item>
      <title>【翻译】 Nginx 如何处理一个请求</title>
      <link>https://qianpeili.github.io/hugoblog/posts/nginx%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Fri, 09 Jun 2017 20:12:05 +0800</pubDate>
      
      <guid>https://qianpeili.github.io/hugoblog/posts/nginx%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82/</guid>
      <description>原文：How nginx processes a request
网上不乏好的翻译，我再做一次翻译，只是为了让自己更好地理解，也方便以后自己翻阅。
Name-based virtual servers nginx 首先需要判断哪个 Server 来处理这个请求。让我们来看一个简单的配置文件，里面定义了3个虚拟服务器，并且都监听了80端口。
server { listen 80; server_name example.org www.example.org; ... } server { listen 80; server_name example.net www.example.net; ... } server { listen 80; server_name example.com www.example.com; ... }  这份配置文件测试的情况是，nginx 根据请求头中的 Host 字段，选择将请求导向哪个 Server。如果Host的值不匹配所有 server_name,或者值为空，那么 nginx 会将请求导向监听这个端口的默认虚拟 Server。如上的配置文件，nginx 会默认把第一个 Server 选为默认 Server。当然也可以通过配置 listen 指令的 default_server 参数，来指定默认 Server。
server { listen 80 default_server; server_name example.net www.example.net; ... }  How to prevent processing requests with undefined server names 如果想要阻止没有Host头字段的请求，可以通过配置一个如下Server来实现：</description>
    </item>
    
  </channel>
</rss>